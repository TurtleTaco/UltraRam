// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sum_io.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sum_io::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sum_io::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> sum_io::ap_ST_fsm_state1 = "1";
const sc_lv<21> sum_io::ap_ST_fsm_state2 = "10";
const sc_lv<21> sum_io::ap_ST_fsm_state3 = "100";
const sc_lv<21> sum_io::ap_ST_fsm_state4 = "1000";
const sc_lv<21> sum_io::ap_ST_fsm_state5 = "10000";
const sc_lv<21> sum_io::ap_ST_fsm_state6 = "100000";
const sc_lv<21> sum_io::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> sum_io::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> sum_io::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> sum_io::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> sum_io::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> sum_io::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sum_io::ap_const_lv32_1 = "1";
const sc_lv<32> sum_io::ap_const_lv32_2 = "10";
const sc_lv<1> sum_io::ap_const_lv1_0 = "0";
const sc_lv<32> sum_io::ap_const_lv32_4 = "100";
const sc_lv<32> sum_io::ap_const_lv32_5 = "101";
const sc_lv<32> sum_io::ap_const_lv32_A = "1010";
const sc_lv<32> sum_io::ap_const_lv32_13 = "10011";
const sc_lv<32> sum_io::ap_const_lv32_14 = "10100";
const sc_lv<15> sum_io::ap_const_lv15_0 = "000000000000000";
const sc_lv<1> sum_io::ap_const_lv1_1 = "1";
const sc_lv<64> sum_io::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> sum_io::ap_const_lv4_5 = "101";
const sc_lv<32> sum_io::ap_const_lv32_3 = "11";
const sc_lv<6> sum_io::ap_const_lv6_17 = "10111";
const sc_lv<64> sum_io::ap_const_lv64_3F847AE147AE147B = "11111110000100011110101110000101000111101011100001010001111011";
const sc_lv<32> sum_io::ap_const_lv32_B = "1011";
const sc_lv<15> sum_io::ap_const_lv15_4E20 = "100111000100000";
const sc_lv<15> sum_io::ap_const_lv15_1 = "1";
const sc_lv<32> sum_io::ap_const_lv32_3F = "111111";
const sc_lv<32> sum_io::ap_const_lv32_34 = "110100";
const sc_lv<32> sum_io::ap_const_lv32_3E = "111110";
const sc_lv<12> sum_io::ap_const_lv12_C01 = "110000000001";
const sc_lv<11> sum_io::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> sum_io::ap_const_lv32_35 = "110101";
const sc_lv<32> sum_io::ap_const_lv32_73 = "1110011";
const bool sum_io::ap_const_boolean_1 = true;

sum_io::sum_io(sc_module_name name) : sc_module(name), mVcdFile(0) {
    empty_U = new sum_io_empty("empty_U");
    empty_U->clk(ap_clk);
    empty_U->reset(ap_rst);
    empty_U->address0(empty_address0);
    empty_U->ce0(empty_ce0);
    empty_U->we0(empty_we0);
    empty_U->d0(ap_var_for_const0);
    empty_U->q0(empty_q0);
    empty_6_U = new sum_io_empty_6("empty_6_U");
    empty_6_U->clk(ap_clk);
    empty_6_U->reset(ap_rst);
    empty_6_U->address0(empty_6_address0);
    empty_6_U->ce0(empty_6_ce0);
    empty_6_U->we0(empty_6_we0);
    empty_6_U->d0(ap_var_for_const1);
    empty_6_U->q0(empty_6_q0);
    sum_io_dmul_64ns_bkb_U1 = new sum_io_dmul_64ns_bkb<1,9,64,64,64>("sum_io_dmul_64ns_bkb_U1");
    sum_io_dmul_64ns_bkb_U1->clk(ap_clk);
    sum_io_dmul_64ns_bkb_U1->reset(ap_rst);
    sum_io_dmul_64ns_bkb_U1->din0(tmp_4_reg_394);
    sum_io_dmul_64ns_bkb_U1->din1(ap_var_for_const2);
    sum_io_dmul_64ns_bkb_U1->ce(ap_var_for_const3);
    sum_io_dmul_64ns_bkb_U1->dout(grp_fu_149_p2);
    sum_io_sitodp_32scud_U2 = new sum_io_sitodp_32scud<1,6,32,64>("sum_io_sitodp_32scud_U2");
    sum_io_sitodp_32scud_U2->clk(ap_clk);
    sum_io_sitodp_32scud_U2->reset(ap_rst);
    sum_io_sitodp_32scud_U2->din0(grp_fu_154_p0);
    sum_io_sitodp_32scud_U2->ce(ap_var_for_const3);
    sum_io_sitodp_32scud_U2->dout(grp_fu_154_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_175_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_175_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_175_p2 );
    sensitive << ( sum_reg_138 );

    SC_METHOD(thread_empty_6_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_169_p1 );
    sensitive << ( tmp_2_fu_187_p1 );

    SC_METHOD(thread_empty_6_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_empty_6_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_157_p2 );

    SC_METHOD(thread_empty_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_169_p1 );
    sensitive << ( tmp_2_fu_187_p1 );

    SC_METHOD(thread_empty_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_empty_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_157_p2 );

    SC_METHOD(thread_exitcond2_fu_157_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_exitcond_fu_175_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( iterator_reg_127 );

    SC_METHOD(thread_extLd8_cast_fu_197_p1);
    sensitive << ( empty_6_q0 );

    SC_METHOD(thread_extLd_cast_fu_193_p1);
    sensitive << ( empty_q0 );

    SC_METHOD(thread_grp_fu_154_p0);
    sensitive << ( tmp_3_reg_384 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_163_p2);
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_isNeg_fu_260_p3);
    sensitive << ( sh_assign_fu_254_p2 );

    SC_METHOD(thread_iterator_1_fu_181_p2);
    sensitive << ( iterator_reg_127 );

    SC_METHOD(thread_loc_V_1_fu_232_p1);
    sensitive << ( p_Val2_1_fu_211_p1 );

    SC_METHOD(thread_loc_V_fu_222_p4);
    sensitive << ( p_Val2_1_fu_211_p1 );

    SC_METHOD(thread_p_Result_s_fu_214_p3);
    sensitive << ( p_Val2_1_fu_211_p1 );

    SC_METHOD(thread_p_Val2_1_fu_211_p1);
    sensitive << ( x_assign_reg_399 );

    SC_METHOD(thread_p_Val2_3_fu_332_p3);
    sensitive << ( isNeg_fu_260_p3 );
    sensitive << ( tmp_5_fu_318_p1 );
    sensitive << ( tmp_6_fu_322_p4 );

    SC_METHOD(thread_p_Val2_s_fu_350_p3);
    sensitive << ( tmp_3_i_i_i_fu_340_p1 );
    sensitive << ( p_Result_s_fu_214_p3 );
    sensitive << ( tmp_9_i_i_i_fu_344_p2 );

    SC_METHOD(thread_sh_assign_1_cast_fu_286_p1);
    sensitive << ( sh_assign_1_fu_278_p3 );

    SC_METHOD(thread_sh_assign_1_fu_278_p3);
    sensitive << ( sh_assign_fu_254_p2 );
    sensitive << ( isNeg_fu_260_p3 );
    sensitive << ( tmp_i_i_i_cast_fu_274_p1 );

    SC_METHOD(thread_sh_assign_fu_254_p2);
    sensitive << ( tmp_i_i_i_i_cast1_fu_250_p1 );

    SC_METHOD(thread_tmp_1_i_i_i_cast_fu_294_p1);
    sensitive << ( sh_assign_1_cast_fu_286_p1 );

    SC_METHOD(thread_tmp_1_i_i_i_fu_290_p1);
    sensitive << ( sh_assign_1_cast_fu_286_p1 );

    SC_METHOD(thread_tmp_2_fu_187_p1);
    sensitive << ( iterator_reg_127 );

    SC_METHOD(thread_tmp_2_i_i_i_fu_298_p2);
    sensitive << ( tmp_8_i_i_i_fu_236_p4 );
    sensitive << ( tmp_1_i_i_i_cast_fu_294_p1 );

    SC_METHOD(thread_tmp_3_fu_201_p2);
    sensitive << ( extLd_cast_fu_193_p1 );
    sensitive << ( extLd8_cast_fu_197_p1 );

    SC_METHOD(thread_tmp_3_i_i_i_fu_340_p1);
    sensitive << ( p_Val2_3_fu_332_p3 );

    SC_METHOD(thread_tmp_4_i_i_i_fu_304_p2);
    sensitive << ( tmp_8_i_i_i_cast_fu_246_p1 );
    sensitive << ( tmp_1_i_i_i_fu_290_p1 );

    SC_METHOD(thread_tmp_5_fu_318_p1);
    sensitive << ( tmp_9_fu_310_p3 );

    SC_METHOD(thread_tmp_6_fu_322_p4);
    sensitive << ( tmp_4_i_i_i_fu_304_p2 );

    SC_METHOD(thread_tmp_8_i_i_i_cast_fu_246_p1);
    sensitive << ( tmp_8_i_i_i_fu_236_p4 );

    SC_METHOD(thread_tmp_8_i_i_i_fu_236_p4);
    sensitive << ( loc_V_1_fu_232_p1 );

    SC_METHOD(thread_tmp_9_fu_310_p3);
    sensitive << ( tmp_2_i_i_i_fu_298_p2 );

    SC_METHOD(thread_tmp_9_i_i_i_fu_344_p2);
    sensitive << ( tmp_3_i_i_i_fu_340_p1 );

    SC_METHOD(thread_tmp_fu_169_p1);
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_tmp_i_i_i_cast_fu_274_p1);
    sensitive << ( tmp_i_i_i_fu_268_p2 );

    SC_METHOD(thread_tmp_i_i_i_fu_268_p2);
    sensitive << ( loc_V_fu_222_p4 );

    SC_METHOD(thread_tmp_i_i_i_i_cast1_fu_250_p1);
    sensitive << ( loc_V_fu_222_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_175_p2 );
    sensitive << ( exitcond2_fu_157_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sum_io_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_163_p2, "i_1_fu_163_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, iterator_1_fu_181_p2, "iterator_1_fu_181_p2");
    sc_trace(mVcdFile, iterator_1_reg_369, "iterator_1_reg_369");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_175_p2, "exitcond_fu_175_p2");
    sc_trace(mVcdFile, tmp_3_fu_201_p2, "tmp_3_fu_201_p2");
    sc_trace(mVcdFile, tmp_3_reg_384, "tmp_3_reg_384");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_154_p1, "grp_fu_154_p1");
    sc_trace(mVcdFile, tmp_4_reg_394, "tmp_4_reg_394");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_149_p2, "grp_fu_149_p2");
    sc_trace(mVcdFile, x_assign_reg_399, "x_assign_reg_399");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, p_Val2_s_fu_350_p3, "p_Val2_s_fu_350_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, empty_address0, "empty_address0");
    sc_trace(mVcdFile, empty_ce0, "empty_ce0");
    sc_trace(mVcdFile, empty_we0, "empty_we0");
    sc_trace(mVcdFile, empty_q0, "empty_q0");
    sc_trace(mVcdFile, empty_6_address0, "empty_6_address0");
    sc_trace(mVcdFile, empty_6_ce0, "empty_6_ce0");
    sc_trace(mVcdFile, empty_6_we0, "empty_6_we0");
    sc_trace(mVcdFile, empty_6_q0, "empty_6_q0");
    sc_trace(mVcdFile, i_reg_116, "i_reg_116");
    sc_trace(mVcdFile, exitcond2_fu_157_p2, "exitcond2_fu_157_p2");
    sc_trace(mVcdFile, iterator_reg_127, "iterator_reg_127");
    sc_trace(mVcdFile, sum_reg_138, "sum_reg_138");
    sc_trace(mVcdFile, tmp_fu_169_p1, "tmp_fu_169_p1");
    sc_trace(mVcdFile, tmp_2_fu_187_p1, "tmp_2_fu_187_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_154_p0, "grp_fu_154_p0");
    sc_trace(mVcdFile, extLd_cast_fu_193_p1, "extLd_cast_fu_193_p1");
    sc_trace(mVcdFile, extLd8_cast_fu_197_p1, "extLd8_cast_fu_197_p1");
    sc_trace(mVcdFile, p_Val2_1_fu_211_p1, "p_Val2_1_fu_211_p1");
    sc_trace(mVcdFile, loc_V_1_fu_232_p1, "loc_V_1_fu_232_p1");
    sc_trace(mVcdFile, tmp_8_i_i_i_fu_236_p4, "tmp_8_i_i_i_fu_236_p4");
    sc_trace(mVcdFile, loc_V_fu_222_p4, "loc_V_fu_222_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast1_fu_250_p1, "tmp_i_i_i_i_cast1_fu_250_p1");
    sc_trace(mVcdFile, sh_assign_fu_254_p2, "sh_assign_fu_254_p2");
    sc_trace(mVcdFile, tmp_i_i_i_fu_268_p2, "tmp_i_i_i_fu_268_p2");
    sc_trace(mVcdFile, isNeg_fu_260_p3, "isNeg_fu_260_p3");
    sc_trace(mVcdFile, tmp_i_i_i_cast_fu_274_p1, "tmp_i_i_i_cast_fu_274_p1");
    sc_trace(mVcdFile, sh_assign_1_fu_278_p3, "sh_assign_1_fu_278_p3");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_286_p1, "sh_assign_1_cast_fu_286_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_cast_fu_294_p1, "tmp_1_i_i_i_cast_fu_294_p1");
    sc_trace(mVcdFile, tmp_8_i_i_i_cast_fu_246_p1, "tmp_8_i_i_i_cast_fu_246_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_fu_290_p1, "tmp_1_i_i_i_fu_290_p1");
    sc_trace(mVcdFile, tmp_2_i_i_i_fu_298_p2, "tmp_2_i_i_i_fu_298_p2");
    sc_trace(mVcdFile, tmp_9_fu_310_p3, "tmp_9_fu_310_p3");
    sc_trace(mVcdFile, tmp_4_i_i_i_fu_304_p2, "tmp_4_i_i_i_fu_304_p2");
    sc_trace(mVcdFile, tmp_5_fu_318_p1, "tmp_5_fu_318_p1");
    sc_trace(mVcdFile, tmp_6_fu_322_p4, "tmp_6_fu_322_p4");
    sc_trace(mVcdFile, p_Val2_3_fu_332_p3, "p_Val2_3_fu_332_p3");
    sc_trace(mVcdFile, tmp_3_i_i_i_fu_340_p1, "tmp_3_i_i_i_fu_340_p1");
    sc_trace(mVcdFile, p_Result_s_fu_214_p3, "p_Result_s_fu_214_p3");
    sc_trace(mVcdFile, tmp_9_i_i_i_fu_344_p2, "tmp_9_i_i_i_fu_344_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sum_io.hdltvin.dat");
    mHdltvoutHandle.open("sum_io.hdltvout.dat");
}

sum_io::~sum_io() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete empty_U;
    delete empty_6_U;
    delete sum_io_dmul_64ns_bkb_U1;
    delete sum_io_sitodp_32scud_U2;
}

void sum_io::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_logic_1;
}

void sum_io::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv4_5;
}

void sum_io::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv6_17;
}

void sum_io::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_3F847AE147AE147B;
}

void sum_io::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_157_p2.read()))) {
        i_reg_116 = i_1_fu_163_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_116 = ap_const_lv15_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_157_p2.read(), ap_const_lv1_1))) {
        iterator_reg_127 = ap_const_lv15_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        iterator_reg_127 = iterator_1_reg_369.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_157_p2.read(), ap_const_lv1_1))) {
        sum_reg_138 = ap_const_lv64_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        sum_reg_138 = p_Val2_s_fu_350_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        iterator_1_reg_369 = iterator_1_fu_181_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_3_reg_384 = tmp_3_fu_201_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_4_reg_394 = grp_fu_154_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        x_assign_reg_399 = grp_fu_149_p2.read();
    }
}

void sum_io::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sum_io::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sum_io::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sum_io::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sum_io::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void sum_io::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void sum_io::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sum_io::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sum_io::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sum_io::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sum_io::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_175_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sum_io::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sum_io::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_175_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sum_io::thread_ap_return() {
    ap_return = sum_reg_138.read();
}

void sum_io::thread_empty_6_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        empty_6_address0 =  (sc_lv<15>) (tmp_2_fu_187_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_6_address0 =  (sc_lv<15>) (tmp_fu_169_p1.read());
    } else {
        empty_6_address0 = "XXXXXXXXXXXXXXX";
    }
}

void sum_io::thread_empty_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        empty_6_ce0 = ap_const_logic_1;
    } else {
        empty_6_ce0 = ap_const_logic_0;
    }
}

void sum_io::thread_empty_6_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_157_p2.read()))) {
        empty_6_we0 = ap_const_logic_1;
    } else {
        empty_6_we0 = ap_const_logic_0;
    }
}

void sum_io::thread_empty_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        empty_address0 =  (sc_lv<15>) (tmp_2_fu_187_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_address0 =  (sc_lv<15>) (tmp_fu_169_p1.read());
    } else {
        empty_address0 = "XXXXXXXXXXXXXXX";
    }
}

void sum_io::thread_empty_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        empty_ce0 = ap_const_logic_1;
    } else {
        empty_ce0 = ap_const_logic_0;
    }
}

void sum_io::thread_empty_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_157_p2.read()))) {
        empty_we0 = ap_const_logic_1;
    } else {
        empty_we0 = ap_const_logic_0;
    }
}

void sum_io::thread_exitcond2_fu_157_p2() {
    exitcond2_fu_157_p2 = (!i_reg_116.read().is_01() || !ap_const_lv15_4E20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_116.read() == ap_const_lv15_4E20);
}

void sum_io::thread_exitcond_fu_175_p2() {
    exitcond_fu_175_p2 = (!iterator_reg_127.read().is_01() || !ap_const_lv15_4E20.is_01())? sc_lv<1>(): sc_lv<1>(iterator_reg_127.read() == ap_const_lv15_4E20);
}

void sum_io::thread_extLd8_cast_fu_197_p1() {
    extLd8_cast_fu_197_p1 = esl_sext<7,6>(empty_6_q0.read());
}

void sum_io::thread_extLd_cast_fu_193_p1() {
    extLd_cast_fu_193_p1 = esl_sext<7,4>(empty_q0.read());
}

void sum_io::thread_grp_fu_154_p0() {
    grp_fu_154_p0 = esl_sext<32,7>(tmp_3_reg_384.read());
}

void sum_io::thread_i_1_fu_163_p2() {
    i_1_fu_163_p2 = (!i_reg_116.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(i_reg_116.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void sum_io::thread_isNeg_fu_260_p3() {
    isNeg_fu_260_p3 = sh_assign_fu_254_p2.read().range(11, 11);
}

void sum_io::thread_iterator_1_fu_181_p2() {
    iterator_1_fu_181_p2 = (!iterator_reg_127.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(iterator_reg_127.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void sum_io::thread_loc_V_1_fu_232_p1() {
    loc_V_1_fu_232_p1 = p_Val2_1_fu_211_p1.read().range(52-1, 0);
}

void sum_io::thread_loc_V_fu_222_p4() {
    loc_V_fu_222_p4 = p_Val2_1_fu_211_p1.read().range(62, 52);
}

void sum_io::thread_p_Result_s_fu_214_p3() {
    p_Result_s_fu_214_p3 = p_Val2_1_fu_211_p1.read().range(63, 63);
}

void sum_io::thread_p_Val2_1_fu_211_p1() {
    p_Val2_1_fu_211_p1 = x_assign_reg_399.read();
}

void sum_io::thread_p_Val2_3_fu_332_p3() {
    p_Val2_3_fu_332_p3 = (!isNeg_fu_260_p3.read()[0].is_01())? sc_lv<63>(): ((isNeg_fu_260_p3.read()[0].to_bool())? tmp_5_fu_318_p1.read(): tmp_6_fu_322_p4.read());
}

void sum_io::thread_p_Val2_s_fu_350_p3() {
    p_Val2_s_fu_350_p3 = (!p_Result_s_fu_214_p3.read()[0].is_01())? sc_lv<64>(): ((p_Result_s_fu_214_p3.read()[0].to_bool())? tmp_9_i_i_i_fu_344_p2.read(): tmp_3_i_i_i_fu_340_p1.read());
}

void sum_io::thread_sh_assign_1_cast_fu_286_p1() {
    sh_assign_1_cast_fu_286_p1 = esl_sext<32,12>(sh_assign_1_fu_278_p3.read());
}

void sum_io::thread_sh_assign_1_fu_278_p3() {
    sh_assign_1_fu_278_p3 = (!isNeg_fu_260_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_260_p3.read()[0].to_bool())? tmp_i_i_i_cast_fu_274_p1.read(): sh_assign_fu_254_p2.read());
}

void sum_io::thread_sh_assign_fu_254_p2() {
    sh_assign_fu_254_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_i_i_cast1_fu_250_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_i_i_cast1_fu_250_p1.read()));
}

void sum_io::thread_tmp_1_i_i_i_cast_fu_294_p1() {
    tmp_1_i_i_i_cast_fu_294_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_286_p1.read());
}

void sum_io::thread_tmp_1_i_i_i_fu_290_p1() {
    tmp_1_i_i_i_fu_290_p1 = esl_zext<169,32>(sh_assign_1_cast_fu_286_p1.read());
}

void sum_io::thread_tmp_2_fu_187_p1() {
    tmp_2_fu_187_p1 = esl_zext<64,15>(iterator_reg_127.read());
}

void sum_io::thread_tmp_2_i_i_i_fu_298_p2() {
    tmp_2_i_i_i_fu_298_p2 = (!tmp_1_i_i_i_cast_fu_294_p1.read().is_01())? sc_lv<54>(): tmp_8_i_i_i_fu_236_p4.read() >> (unsigned short)tmp_1_i_i_i_cast_fu_294_p1.read().to_uint();
}

void sum_io::thread_tmp_3_fu_201_p2() {
    tmp_3_fu_201_p2 = (!extLd_cast_fu_193_p1.read().is_01() || !extLd8_cast_fu_197_p1.read().is_01())? sc_lv<7>(): (sc_bigint<7>(extLd_cast_fu_193_p1.read()) + sc_bigint<7>(extLd8_cast_fu_197_p1.read()));
}

void sum_io::thread_tmp_3_i_i_i_fu_340_p1() {
    tmp_3_i_i_i_fu_340_p1 = esl_zext<64,63>(p_Val2_3_fu_332_p3.read());
}

void sum_io::thread_tmp_4_i_i_i_fu_304_p2() {
    tmp_4_i_i_i_fu_304_p2 = (!tmp_1_i_i_i_fu_290_p1.read().is_01())? sc_lv<169>(): tmp_8_i_i_i_cast_fu_246_p1.read() << (unsigned short)tmp_1_i_i_i_fu_290_p1.read().to_uint();
}

void sum_io::thread_tmp_5_fu_318_p1() {
    tmp_5_fu_318_p1 = esl_zext<63,1>(tmp_9_fu_310_p3.read());
}

void sum_io::thread_tmp_6_fu_322_p4() {
    tmp_6_fu_322_p4 = tmp_4_i_i_i_fu_304_p2.read().range(115, 53);
}

void sum_io::thread_tmp_8_i_i_i_cast_fu_246_p1() {
    tmp_8_i_i_i_cast_fu_246_p1 = esl_zext<169,54>(tmp_8_i_i_i_fu_236_p4.read());
}

void sum_io::thread_tmp_8_i_i_i_fu_236_p4() {
    tmp_8_i_i_i_fu_236_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, loc_V_1_fu_232_p1.read()), ap_const_lv1_0);
}

void sum_io::thread_tmp_9_fu_310_p3() {
    tmp_9_fu_310_p3 = tmp_2_i_i_i_fu_298_p2.read().range(53, 53);
}

void sum_io::thread_tmp_9_i_i_i_fu_344_p2() {
    tmp_9_i_i_i_fu_344_p2 = (!ap_const_lv64_0.is_01() || !tmp_3_i_i_i_fu_340_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_0) - sc_biguint<64>(tmp_3_i_i_i_fu_340_p1.read()));
}

void sum_io::thread_tmp_fu_169_p1() {
    tmp_fu_169_p1 = esl_zext<64,15>(i_reg_116.read());
}

void sum_io::thread_tmp_i_i_i_cast_fu_274_p1() {
    tmp_i_i_i_cast_fu_274_p1 = esl_sext<12,11>(tmp_i_i_i_fu_268_p2.read());
}

void sum_io::thread_tmp_i_i_i_fu_268_p2() {
    tmp_i_i_i_fu_268_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_fu_222_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_fu_222_p4.read()));
}

void sum_io::thread_tmp_i_i_i_i_cast1_fu_250_p1() {
    tmp_i_i_i_i_cast1_fu_250_p1 = esl_zext<12,11>(loc_V_fu_222_p4.read());
}

void sum_io::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_157_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void sum_io::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


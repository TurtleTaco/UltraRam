// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sum_io,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-3-e-es1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.457113,HLS_SYN_LAT=400002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1625,HLS_SYN_LUT=1943}" *)

module sum_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] i_1_fu_163_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] iterator_1_fu_181_p2;
reg   [14:0] iterator_1_reg_369;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_175_p2;
wire   [6:0] tmp_3_fu_201_p2;
reg   [6:0] tmp_3_reg_384;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_154_p1;
reg   [63:0] tmp_4_reg_394;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_149_p2;
reg   [63:0] x_assign_reg_399;
wire    ap_CS_fsm_state20;
wire   [63:0] p_Val2_s_fu_350_p3;
wire    ap_CS_fsm_state21;
reg   [14:0] empty_address0;
reg    empty_ce0;
reg    empty_we0;
wire   [3:0] empty_q0;
reg   [14:0] empty_6_address0;
reg    empty_6_ce0;
reg    empty_6_we0;
wire   [5:0] empty_6_q0;
reg   [14:0] i_reg_116;
wire   [0:0] exitcond2_fu_157_p2;
reg   [14:0] iterator_reg_127;
reg   [63:0] sum_reg_138;
wire   [63:0] tmp_fu_169_p1;
wire   [63:0] tmp_2_fu_187_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state12;
wire  signed [31:0] grp_fu_154_p0;
wire  signed [6:0] extLd_cast_fu_193_p1;
wire  signed [6:0] extLd8_cast_fu_197_p1;
wire   [63:0] p_Val2_1_fu_211_p1;
wire   [51:0] loc_V_1_fu_232_p1;
wire   [53:0] tmp_8_i_i_i_fu_236_p4;
wire   [10:0] loc_V_fu_222_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_250_p1;
wire   [11:0] sh_assign_fu_254_p2;
wire   [10:0] tmp_i_i_i_fu_268_p2;
wire   [0:0] isNeg_fu_260_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_274_p1;
wire   [11:0] sh_assign_1_fu_278_p3;
wire  signed [31:0] sh_assign_1_cast_fu_286_p1;
wire   [53:0] tmp_1_i_i_i_cast_fu_294_p1;
wire   [168:0] tmp_8_i_i_i_cast_fu_246_p1;
wire   [168:0] tmp_1_i_i_i_fu_290_p1;
wire   [53:0] tmp_2_i_i_i_fu_298_p2;
wire   [0:0] tmp_9_fu_310_p3;
wire   [168:0] tmp_4_i_i_i_fu_304_p2;
wire   [62:0] tmp_5_fu_318_p1;
wire   [62:0] tmp_6_fu_322_p4;
wire   [62:0] p_Val2_3_fu_332_p3;
wire   [63:0] tmp_3_i_i_i_fu_340_p1;
wire   [0:0] p_Result_s_fu_214_p3;
wire   [63:0] tmp_9_i_i_i_fu_344_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

sum_io_empty #(
    .DataWidth( 4 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .we0(empty_we0),
    .d0(4'd5),
    .q0(empty_q0)
);

sum_io_empty_6 #(
    .DataWidth( 6 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
empty_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_6_address0),
    .ce0(empty_6_ce0),
    .we0(empty_6_we0),
    .d0(6'd23),
    .q0(empty_6_q0)
);

sum_io_dmul_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sum_io_dmul_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_394),
    .din1(64'd4576918229304087675),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

sum_io_sitodp_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sum_io_sitodp_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_154_p0),
    .ce(1'b1),
    .dout(grp_fu_154_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_157_p2))) begin
        i_reg_116 <= i_1_fu_163_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_116 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_157_p2 == 1'd1))) begin
        iterator_reg_127 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        iterator_reg_127 <= iterator_1_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_157_p2 == 1'd1))) begin
        sum_reg_138 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sum_reg_138 <= p_Val2_s_fu_350_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        iterator_1_reg_369 <= iterator_1_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_3_reg_384 <= tmp_3_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_4_reg_394 <= grp_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        x_assign_reg_399 <= grp_fu_149_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_175_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_175_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_6_address0 = tmp_2_fu_187_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_6_address0 = tmp_fu_169_p1;
    end else begin
        empty_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        empty_6_ce0 = 1'b1;
    end else begin
        empty_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_157_p2))) begin
        empty_6_we0 = 1'b1;
    end else begin
        empty_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_address0 = tmp_2_fu_187_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_address0 = tmp_fu_169_p1;
    end else begin
        empty_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_157_p2))) begin
        empty_we0 = 1'b1;
    end else begin
        empty_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_157_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_175_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = sum_reg_138;

assign exitcond2_fu_157_p2 = ((i_reg_116 == 15'd20000) ? 1'b1 : 1'b0);

assign exitcond_fu_175_p2 = ((iterator_reg_127 == 15'd20000) ? 1'b1 : 1'b0);

assign extLd8_cast_fu_197_p1 = $signed(empty_6_q0);

assign extLd_cast_fu_193_p1 = $signed(empty_q0);

assign grp_fu_154_p0 = $signed(tmp_3_reg_384);

assign i_1_fu_163_p2 = (i_reg_116 + 15'd1);

assign isNeg_fu_260_p3 = sh_assign_fu_254_p2[32'd11];

assign iterator_1_fu_181_p2 = (iterator_reg_127 + 15'd1);

assign loc_V_1_fu_232_p1 = p_Val2_1_fu_211_p1[51:0];

assign loc_V_fu_222_p4 = {{p_Val2_1_fu_211_p1[62:52]}};

assign p_Result_s_fu_214_p3 = p_Val2_1_fu_211_p1[32'd63];

assign p_Val2_1_fu_211_p1 = x_assign_reg_399;

assign p_Val2_3_fu_332_p3 = ((isNeg_fu_260_p3[0:0] === 1'b1) ? tmp_5_fu_318_p1 : tmp_6_fu_322_p4);

assign p_Val2_s_fu_350_p3 = ((p_Result_s_fu_214_p3[0:0] === 1'b1) ? tmp_9_i_i_i_fu_344_p2 : tmp_3_i_i_i_fu_340_p1);

assign sh_assign_1_cast_fu_286_p1 = $signed(sh_assign_1_fu_278_p3);

assign sh_assign_1_fu_278_p3 = ((isNeg_fu_260_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_274_p1 : sh_assign_fu_254_p2);

assign sh_assign_fu_254_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_250_p1));

assign tmp_1_i_i_i_cast_fu_294_p1 = $unsigned(sh_assign_1_cast_fu_286_p1);

assign tmp_1_i_i_i_fu_290_p1 = $unsigned(sh_assign_1_cast_fu_286_p1);

assign tmp_2_fu_187_p1 = iterator_reg_127;

assign tmp_2_i_i_i_fu_298_p2 = tmp_8_i_i_i_fu_236_p4 >> tmp_1_i_i_i_cast_fu_294_p1;

assign tmp_3_fu_201_p2 = ($signed(extLd_cast_fu_193_p1) + $signed(extLd8_cast_fu_197_p1));

assign tmp_3_i_i_i_fu_340_p1 = p_Val2_3_fu_332_p3;

assign tmp_4_i_i_i_fu_304_p2 = tmp_8_i_i_i_cast_fu_246_p1 << tmp_1_i_i_i_fu_290_p1;

assign tmp_5_fu_318_p1 = tmp_9_fu_310_p3;

assign tmp_6_fu_322_p4 = {{tmp_4_i_i_i_fu_304_p2[115:53]}};

assign tmp_8_i_i_i_cast_fu_246_p1 = tmp_8_i_i_i_fu_236_p4;

assign tmp_8_i_i_i_fu_236_p4 = {{{{1'd1}, {loc_V_1_fu_232_p1}}}, {1'd0}};

assign tmp_9_fu_310_p3 = tmp_2_i_i_i_fu_298_p2[32'd53];

assign tmp_9_i_i_i_fu_344_p2 = (64'd0 - tmp_3_i_i_i_fu_340_p1);

assign tmp_fu_169_p1 = i_reg_116;

assign tmp_i_i_i_cast_fu_274_p1 = $signed(tmp_i_i_i_fu_268_p2);

assign tmp_i_i_i_fu_268_p2 = (11'd1023 - loc_V_fu_222_p4);

assign tmp_i_i_i_i_cast1_fu_250_p1 = loc_V_fu_222_p4;

endmodule //sum_io

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sum_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sum_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sum_io,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-3-e-es1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.457113,HLS_SYN_LAT=400002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1625,HLS_SYN_LUT=1943}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv64_3F847AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110000100011110101110000101000111101011100001010001111011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_163_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal iterator_1_fu_181_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal iterator_1_reg_369 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_201_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_384 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_394 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_s_fu_350_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal empty_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal empty_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_6_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_6_ce0 : STD_LOGIC;
    signal empty_6_we0 : STD_LOGIC;
    signal empty_6_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_116 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond2_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iterator_reg_127 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_reg_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_cast_fu_193_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal extLd8_cast_fu_197_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_1_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_232_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_8_i_i_i_fu_236_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_fu_222_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_250_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_254_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_268_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_278_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_i_cast_fu_294_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_8_i_i_i_cast_fu_246_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_1_i_i_i_fu_290_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_2_i_i_i_fu_298_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_i_fu_304_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_5_fu_318_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_6_fu_322_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_3_fu_332_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_i_i_i_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i_fu_344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component sum_io_dmul_64ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sum_io_sitodp_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sum_io_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component sum_io_empty_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    empty_U : component sum_io_empty
    generic map (
        DataWidth => 4,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_address0,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => ap_const_lv4_5,
        q0 => empty_q0);

    empty_6_U : component sum_io_empty_6
    generic map (
        DataWidth => 6,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_6_address0,
        ce0 => empty_6_ce0,
        we0 => empty_6_we0,
        d0 => ap_const_lv6_17,
        q0 => empty_6_q0);

    sum_io_dmul_64ns_bkb_U1 : component sum_io_dmul_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_394,
        din1 => ap_const_lv64_3F847AE147AE147B,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    sum_io_sitodp_32scud_U2 : component sum_io_sitodp_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_154_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_157_p2))) then 
                i_reg_116 <= i_1_fu_163_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_116 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    iterator_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_157_p2 = ap_const_lv1_1))) then 
                iterator_reg_127 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                iterator_reg_127 <= iterator_1_reg_369;
            end if; 
        end if;
    end process;

    sum_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_157_p2 = ap_const_lv1_1))) then 
                sum_reg_138 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                sum_reg_138 <= p_Val2_s_fu_350_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                iterator_1_reg_369 <= iterator_1_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_3_reg_384 <= tmp_3_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_4_reg_394 <= grp_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                x_assign_reg_399 <= grp_fu_149_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_175_p2, exitcond2_fu_157_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_157_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_175_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_175_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_175_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_reg_138;

    empty_6_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_169_p1, tmp_2_fu_187_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            empty_6_address0 <= tmp_2_fu_187_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            empty_6_address0 <= tmp_fu_169_p1(15 - 1 downto 0);
        else 
            empty_6_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_6_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            empty_6_ce0 <= ap_const_logic_1;
        else 
            empty_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_6_we0_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_157_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_157_p2))) then 
            empty_6_we0 <= ap_const_logic_1;
        else 
            empty_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_169_p1, tmp_2_fu_187_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            empty_address0 <= tmp_2_fu_187_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            empty_address0 <= tmp_fu_169_p1(15 - 1 downto 0);
        else 
            empty_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_157_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_157_p2))) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_157_p2 <= "1" when (i_reg_116 = ap_const_lv15_4E20) else "0";
    exitcond_fu_175_p2 <= "1" when (iterator_reg_127 = ap_const_lv15_4E20) else "0";
        extLd8_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_6_q0),7));

        extLd_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_q0),7));

        grp_fu_154_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_384),32));

    i_1_fu_163_p2 <= std_logic_vector(unsigned(i_reg_116) + unsigned(ap_const_lv15_1));
    isNeg_fu_260_p3 <= sh_assign_fu_254_p2(11 downto 11);
    iterator_1_fu_181_p2 <= std_logic_vector(unsigned(iterator_reg_127) + unsigned(ap_const_lv15_1));
    loc_V_1_fu_232_p1 <= p_Val2_1_fu_211_p1(52 - 1 downto 0);
    loc_V_fu_222_p4 <= p_Val2_1_fu_211_p1(62 downto 52);
    p_Result_s_fu_214_p3 <= p_Val2_1_fu_211_p1(63 downto 63);
    p_Val2_1_fu_211_p1 <= x_assign_reg_399;
    p_Val2_3_fu_332_p3 <= 
        tmp_5_fu_318_p1 when (isNeg_fu_260_p3(0) = '1') else 
        tmp_6_fu_322_p4;
    p_Val2_s_fu_350_p3 <= 
        tmp_9_i_i_i_fu_344_p2 when (p_Result_s_fu_214_p3(0) = '1') else 
        tmp_3_i_i_i_fu_340_p1;
        sh_assign_1_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_278_p3),32));

    sh_assign_1_fu_278_p3 <= 
        tmp_i_i_i_cast_fu_274_p1 when (isNeg_fu_260_p3(0) = '1') else 
        sh_assign_fu_254_p2;
    sh_assign_fu_254_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_250_p1));
    tmp_1_i_i_i_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_286_p1),54));
    tmp_1_i_i_i_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_286_p1),169));
    tmp_2_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iterator_reg_127),64));
    tmp_2_i_i_i_fu_298_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_i_i_i_fu_236_p4),to_integer(unsigned('0' & tmp_1_i_i_i_cast_fu_294_p1(31-1 downto 0)))));
    tmp_3_fu_201_p2 <= std_logic_vector(signed(extLd_cast_fu_193_p1) + signed(extLd8_cast_fu_197_p1));
    tmp_3_i_i_i_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_fu_332_p3),64));
    tmp_4_i_i_i_fu_304_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_i_i_i_cast_fu_246_p1),to_integer(unsigned('0' & tmp_1_i_i_i_fu_290_p1(31-1 downto 0)))));
    tmp_5_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_310_p3),63));
    tmp_6_fu_322_p4 <= tmp_4_i_i_i_fu_304_p2(115 downto 53);
    tmp_8_i_i_i_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_i_i_i_fu_236_p4),169));
    tmp_8_i_i_i_fu_236_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_232_p1) & ap_const_lv1_0);
    tmp_9_fu_310_p3 <= tmp_2_i_i_i_fu_298_p2(53 downto 53);
    tmp_9_i_i_i_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(tmp_3_i_i_i_fu_340_p1));
    tmp_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_116),64));
        tmp_i_i_i_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_268_p2),12));

    tmp_i_i_i_fu_268_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_222_p4));
    tmp_i_i_i_i_cast1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_222_p4),12));
end behav;
